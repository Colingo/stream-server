{"body":"# browser-stream-server\r\n\r\nA stream server in the browser\r\n\r\nCreate streaming servers in your browser. Emulating peer to peer connections through a central proxy server\r\n\r\n## Example browser server (In a seperate browser)\r\n\r\n``` js\r\nvar StreamServer = require(\"browser-stream-server\")\r\n    , boot = require(\"boot\")\r\n    , mdm = boot(\"/boot\")\r\n\r\n// Open a Stream server and listen on a server name\r\nStreamServer(mdm, function (stream) {\r\n    // Called every time a client opens up a stream connection to you\r\n    stream.on(\"data\", function (data) {\r\n        console.log(\"[SERVER]\", data)\r\n    })\r\n    stream.write(\"from server\")\r\n}).listen(\"SERVER_NAME\")\r\n```\r\n\r\n## Example browser client (In a seperate browser)\r\n\r\n``` js\r\nvar StreamClient = require(\"browser-stream-server\")\r\n    , boot = require(\"boot\")\r\n    , mdm = boot(\"/boot\")\r\n\r\n// Open a connection to a named stream server\r\nvar stream = StreamClient(mdm).connect(\"SERVER_NAME\")\r\nstream.on(\"data\", function (data) {\r\n    console.log(\"[CLIENT]\", data)\r\n})\r\nstream.write(\"from client\")\r\n```\r\n\r\n## Example proxy server\r\n\r\n``` js\r\nvar boot = require(\"boot\")\r\n    , StreamServerProxy = require(\"browser-stream-server\")\r\n    , StreamRouter = require(\"stream-router\")\r\n\r\n// route stream traffic from boot through a stream router\r\nvar streamRouter = StreamRouter()\r\n    , sock = boot(streamRouter)\r\n\r\n// for every request to /browser-server let the StreamServer proxy handle it\r\nstreamRouter.addRoute(\"/browser-server/*\"\r\n    , StreamServerProxy(\"/browser-server\"))\r\n\r\nsock.install(someHttpServer, \"/boot\")\r\n```\r\n\r\n## Motivation\r\n\r\nThis a pre-runner to real P2P experiments that will be done once we can create [data channels][3] with WebRTC\r\n\r\nThis is the smallest piece necessary to spawn arbitary stream servers in browsers.\r\n\r\n## Documentation\r\n\r\n### `StreamClient(mdm, options).connect(serverName)`\r\n\r\nTo be used in the browser\r\n\r\n``` js\r\nvar StreamClient = require(\"browser-stream-server\")\r\nvar stream = StreamClient(mdm).connect(\"SERVER_NAME\")\r\n```\r\n\r\nReturns a stream connection to that server name. It assumes the server is running somewhere else. If it's not then the stream is closed.\r\n\r\nThe `mdm` value is a [MuxDemux][4] stream. This can be got from mux-demux, mux-demux-shoe or boot.\r\n\r\noptions include a prefix option which allows you to set a custom prefix if the StreamServerProxy uses a custom prefix.\r\n\r\n### `StreamServer(mdm, options, callback).listen(serverName)`\r\n\r\nTo be used in the browser\r\n\r\n``` js\r\nvar StreamServer = require(\"browser-stream-server\")\r\nvar server = StreamServer(mdm, options, function (stream) {\r\n    // handle stream\r\n}).listen(\"SERVER_NAME\")\r\n```\r\n\r\nCreates a server stream connection. It assumes that named server is not already running somewhere else. If it is then the stream is closed.\r\n\r\nThe `mdm` value is a [MuxDemux][4] stream. This can be got from mux-demux, mux-demux-shoe or boot.\r\n\r\noptions are optional, you can pass a callback as the second parameter. The callback get's called every time someone else calls `.connect(serverName)` and you get passed a stream connection to them\r\n\r\noptions include a prefix option which allows you to set a custom prefix if the StreamServerProxy uses a custom prefix.\r\n\r\nTo close the server just `.end()` the returned server\r\n\r\n### `StreamServerProxy(prefix)`\r\n\r\nTo be used in the server\r\n\r\n``` js\r\nvar StreamServerProxy = require(\"browser-stream-server\")\r\n    , proxy = StreamServerProxy(\"/somePrefix\")\r\n// for every request to /browser-server let the StreamServer proxy handle it\r\nstreamRouter.addRoute(\"/somePrefix/*\", proxy)\r\n```\r\n\r\nSet up a steam route handler to allow the stream servers and clients to be proxied through your central server.\r\n\r\nOptionally pass in a prefix which defaults to `\"/browser-server\"`. If you pass in a different prefix make sure that your browser code matches the prefix.\r\n\r\n#### proxy events\r\n\r\nThe returned proxy object emits `server-created` and `server-destroyed` events when a server stream connects and claims to own the SERVER_NAME\r\n\r\n``` js\r\nproxy.on(\"server-created\", function (serverName) {\r\n    createSomeSpecialResources(serverName)\r\n})\r\n\r\nproxy.on(\"server-destroyed\", function (serverName) {\r\n    destroySpecialResources(serverName)\r\n})\r\n```\r\n\r\n#### `proxy.connect(\"serverName\")`\r\n\r\n``` js\r\nvar stream = proxy.connect(serverName)\r\n```\r\n\r\nYou can manually connect directly to a stream server. This runs similar logic to `StreamClient(...).connect(serverName)`\r\n\r\n## How it works\r\n\r\nWhen you call `StreamServer(...).listen(SERVER_NAME)` you open a server stream to the `StreamServerProxy` and tell the server \"redirect all connect SERVER_NAME traffic to me\"\r\n\r\nWhen you call `StreamClient(...).connect(SERVER_NAME)` you open a client stream to the `StreamServerProxy` saying \"connect me to SERVER_NAME\". The `StreamProxyServer` then sends a message to `StreamServer` identified by SERVER_NAME. The message contains a unique identifier, UNIQUE_ID for this client stream. The proxy server stores this client stream in memory.\r\n\r\nThe `StreamServer` receives this message and opens another connection to the `StreamServerProxy` saying \"hi I'm server SERVER_NAME and want to connect to client UNIQUE_ID\". The `StreamServerProxy` then gets the client stream out of memory and connects it to the new server connection which allows the client to talk to the server\r\n\r\n## Installation\r\n\r\n`npm install browser-stream-server`\r\n\r\n## Contributors\r\n\r\n - Raynos\r\n\r\n## MIT Licenced\r\n\r\n  [1]: https://secure.travis-ci.org/Raynos/browser-stream-server.png\r\n  [2]: http://travis-ci.org/Raynos/browser-stream-server\r\n  [3]: http://dev.w3.org/2011/webrtc/editor/webrtc.html#widl-RTCPeerConnection-createDataChannel-DataChannel-DOMString-label-DataChannelInit-dataChannelDict\r\n  [4]: https://github.com/dominictarr/mux-demux#muxdemuxoptions","tagline":"Create a server in the browser","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Browser-stream-server","google":""}